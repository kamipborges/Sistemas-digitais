--------------------------------------------------------------------------------
-- RELOGIO DE XADREZ
-- Author - Fernando Moraes - 25/out/2023
-- Revision - Iaçanã Ianiski Weber - 30/out/2023
--------------------------------------------------------------------------------
library IEEE;
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
library work;

entity relogio_xadrez is
    port( 
        clock,reset,load,j1,j2:in std_logic;
        init_time:in std_logic_vector(7 downto 0);
        contj1,contj2:out std_logic_vector(15 downto 0);
        winJ1,winJ2:out std_logic
    );
end relogio_xadrez;

architecture relogio_xadrez of relogio_xadrez is
    type states is (initialization,carrega,player1,player2,winnerj1,winnerj2);
    signal EA, PE : states;
    signal cont1,cont2:std_logic_vector(15 downto 0);
    signal en1, en2,comecou: std_logic;    
begin

    contador1 : entity work.temporizador port map (
        clock => clock,
        reset => reset,
        load => load,
        en => en1,
        init_time => init_time,
        cont => contj1
    );
    contador2 : entity work.temporizador port map (
        clock => clock,
        reset => reset,
        load => load,
        en => en2,
        init_time => init_time,
        cont => contj2
    );

    -- PROCESSO DE TROCA DE ESTADOS
    process (clock, reset)
    begin
        if reset='1' then
            --contj1 <= (others => '0');
            --contj2 <= (others => '0');
            EA <= initialization;
        else if rising_edge(clock) then
            if load = '1' then
                -- contj1(15 downto 8) <= init_time(7 downto 0);
                -- contj1(7 downto 0) <= (others => '0');
                -- contj2(15 downto 8) <= init_time(7 downto 0);
                -- contj2(7 downto 0) <= (others => '0');
                EA <= carrega;
            else
                EA <= PE;
            end if;
        end if;
    end if;
    end process;
    -- PROCESSO PARA DEFINIR O PROXIMO ESTADO
    process (EA,j1,j2) --<<< Nao esqueca de adicionar os sinais da lista de sensitividade
    begin
        case EA is
            when initialization =>
                if load ='1' then 
                    PE <= carrega;
                else 
                    PE <= initialization;
                end if;
            when carrega =>
                if j1 ='1' then 
                    PE <= player1;
                -- else 
                    -- PE <= carrega;
                -- end if;
                -- if j2='1' then 
                    -- PE <= player2;
                else 
                    PE <= carrega;
                end if;
            when player1 =>
                if j1='1' then 
                    PE <= player2;
                end if;
                    if contj1 = x"0" then 
                        PE <= winnerj2;
                    end if;
            when player2 =>
                if contj2 = x"0" then 
                    PE <= winnerj1;
                end if;
                if j2='1' then
                    PE <= player1;
                end if;
            when winnerj1 =>
                if reset ='1' then 
                    PE <= initialization;
                end if;
            when winnerj2 =>
                if reset ='1' then 
                    PE <= initialization;
                end if;
        end case;
    end process;
        --cont1(15 downto 8) <= init_time(others=>'0') when EA = carrega;
        --cont2(15 downto 8) <= init_time(others=>'0') when EA = carrega;
        -- en1 <= '1' when EA = player2 else '0';
        -- contj1 <= cont1 when EA = player1;
        -- en2 <= '1' when EA = player1 else '0';
        -- contj2 <= cont2 when EA = player2;
        comecou <= '1' when EA = player1 or EA = player2 else '0';
        en1 <= '1' when EA = player1 or (EA = carrega and comecou = '1') else '0';
        en2 <= '1' when EA = player2 else '0';
        --winJ1 <= '1' when EA = winnerj1 or contj2 = x"0" else '0';
        winJ1 <= '1' when contj2 = x"0" and contj1 /= x"0" else '0';
        winJ2 <= '1' when contj1 = x"0" and contj2 /= x"0" else '0';
        --winJ2 <= '1' when EA = winnerj2 or contj1 = x"0" else '0';
    -- ATRIBUICAO COMBINACIONAL DOS SINAIS INTERNOS E SAIDAS - Dica: faca uma maquina de Moore, desta forma os sinais dependem apenas do estado atual!!
end relogio_xadrez;
